title: $:/plugins/BTC/TiddlyFlex/globals/dragndrop
tags: $:/tags/Global

\procedure tiddlyflex-top-dragenter-actions()
<%if [[$:/state/dragging]has[dragenter-count]] %>
 	<$action-setfield $tiddler="$:/state/dragging" starting-next-tiddler="" copying="" target=<<currentTiddler>> margin="top" nth={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}} river=<<tiddlyFlexColumn>> next-tiddler="" from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}} from-story=<<tv-story-list>> dragenter-count={{{ [[$:/state/dragging]get[dragenter-count]add[1]] }}}/>
<% else %>
	<$action-setfield $tiddler="$:/state/dragging" dragenter-count="1"/>
<% endif %>
\end
\procedure tiddlyflex-bottom-dragenter-actions()
<%if [[$:/state/dragging]has[dragenter-count]] %>
	<$action-setfield $tiddler="$:/state/dragging" starting-next-tiddler="" copying="" target=<<currentTiddler>> margin="bottom" nth={{{ [list<tv-story-list>allbefore<currentTiddler>count[]add[1]] }}} river=<<tiddlyFlexColumn>> next-tiddler="" from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]add[1]] }}} from-story=<<tv-story-list>> dragenter-count={{{ [[$:/state/dragging]get[dragenter-count]add[1]] }}}/>
<% else %>
	<$action-setfield $tiddler="$:/state/dragging" dragenter-count="1"/>
<% endif %>
\end
\procedure tiddlyflex-top-drop-actions-inner()
<%if [<actionTiddler>!match<currentTiddler>] %>
	<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<currentTiddler>]"/>
	<%if [<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]] %>
		<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
	<% endif %>
<% else %>
	<$action-deletetiddler $tiddler="$:/state/drag-handled"/><$action-deletetiddler $tiddler="$:/state/dragging"/>
<% endif %>
<$vars fromStoryList={{$:/state/dragging!!starting-from-story}} fromHistoryList={{$:/state/dragging!!from-history}}>
	<%if [<fromStoryList>!match<tv-story-list>] %>
		<%if [{$:/state/dragging!!is-focused-tiddler}match[TRUE]] %>
			<$action-setfield $tiddler=<<fromHistoryList>> current-tiddler={{{ [list<fromStoryList>zth{$:/state/dragging!!starting-from-index}] }}}/>
		<% endif %>
	<% endif %>
</$vars>
\end
\procedure tiddlyflex-top-drop-actions()
<$action-setfield $tiddler="$:/state/drag-handled" text="yes"/>
<$vars prefix="[[" suffix="]]">
	<%if [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] %>
		<$set name="actionTiddler" value={{{ [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] }}}>
			<<tiddlyflex-top-drop-actions-inner>>
		</$set>
	<% else %>
		<<tiddlyflex-top-drop-actions-inner>>
	<% endif %>
</$vars>
\end
\procedure tiddlyflex-bottom-drop-actions-inner()
<$set name="nextTiddler" value={{{ [list<tv-story-list>after<currentTiddler>] }}}>
	<%if [<nextTiddler>match[]] %>
		<$action-listops $tiddler=<<tv-story-list>> $subfilter="[<actionTiddler>]"/>
		<$list filter="[<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]]" variable="ignore">
			<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
		</$list>
	<% else %>
		<%if [<actionTiddler>!match<nextTiddler>] %>
			<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<nextTiddler>]"/>
			<$list filter="[<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]]" variable="ignore">
				<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
			</$list>
		<% else %>
			<$action-deletetiddler $tiddler="$:/state/drag-handled"/><$action-deletetiddler $tiddler="$:/state/dragging"/>
		<% endif %>
	<% endif %>
</$set>
<$vars fromStoryList={{$:/state/dragging!!starting-from-story}} fromHistoryList={{$:/state/dragging!!from-history}}>
	<%if [<fromStoryList>!match<tv-story-list>] %>
		<%if [{$:/state/dragging!!is-focused-tiddler}match[TRUE]] %>
			<$action-setfield $tiddler=<<fromHistoryList>> current-tiddler={{{ [list<fromStoryList>zth{$:/state/dragging!!starting-from-index}] }}}/>
		<% endif %>
	<% endif %>
</$vars>
\end
\procedure tiddlyflex-bottom-drop-actions()
<$action-setfield $tiddler="$:/state/drag-handled" text="yes"/>
<$vars prefix="[[" suffix="]]">
	<%if [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] %>
		<$set name="actionTiddler" value={{{ [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] }}}>
			<<tiddlyflex-bottom-drop-actions-inner>>
		</$set>
	<% else %>
		<<tiddlyflex-bottom-drop-actions-inner>>
	<% endif %>
</$vars>
\end
\procedure tiddlyflex-drag-start-actions()
<$action-setfield $tiddler="$:/state/dragging"
	nth={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	height=<<tv-selectednode-height>>
	width=<<tv-selectednode-width>>
	start-river=<<tiddlyFlexColumn>>
	starting-next-tiddler={{{ [list<tv-story-list>after<currentTiddler>] }}}
	starting-from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	starting-from-story=<<tv-story-list>>
/>
<$action-setfield $tiddler="$:/state/dragging"
	drag-tiddler=<<currentTiddler>>
	next-tiddler={{{ [list<tv-story-list>after<currentTiddler>] }}}
	from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	from-story=<<tv-story-list>>
	from-history=<<tv-history-list>>
	is-focused-tiddler={{{ [<tv-history-list>get[current-tiddler]match<currentTiddler>then[TRUE]] ~[[FALSE]] }}}
	target={{{ [list<tv-story-list>after<currentTiddler>] }}}
/>
<$action-setfield $tiddler="$:/state/dragging" text="yes"/>
<%if [<modifier>!match[ctrl]] %>
	<$action-listops $tiddler=<<tv-story-list>> $subfilter="-[<currentTiddler>]"/>
<% else %>
	<$action-setfield $tiddler="$:/state/dragging" copying="yes"/>
<% endif %>
\end
\procedure tiddlyflex-drag-end-actions()
<%if [[$:/state/drag-handled]is[missing]] %>
	<$let fromStoryList={{$:/state/dragging!!starting-from-story}} fromIndex={{$:/state/dragging!!starting-from-index}} listBeforeTiddler={{{ [list<fromStoryList>zth<fromIndex>] }}} prefix="[[" suffix="]]" actionTiddler={{{ [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] :else[<actionTiddler>] }}}>
		<%if [<listBeforeTiddler>!is[blank]] %>
			<$action-listops $tiddler=<<fromStoryList>> $subfilter="+[insertbefore<actionTiddler>,<listBeforeTiddler>]"/>
		<% else %>
			<$action-listops $tiddler=<<fromStoryList>> $subfilter="[<actionTiddler>]"/>
		<% endif %>
		<$action-deletetiddler $tiddler="$:/state/drag-handled"/>
		<$action-deletetiddler $tiddler="$:/state/dragging"/>
	</$let>
<% else %>
	<$action-deletetiddler $tiddler="$:/state/drag-handled"/>
<% endif %>
\end
\procedure tiddlyflex-story-droppable-drop-actions()
<$action-setfield $tiddler="$:/state/drag-handled" text="yes"/>
<$vars prefix="[[" suffix="]]">
	<%if [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] %>
		<$set name="actionTiddler" value={{{ [<actionTiddler>removeprefix<prefix>removesuffix<suffix>] }}}>
			<%if [{$:/state/tiddlyflex/story-river/filter}match[yes]] +[subfilter<tdff.tiddlyflex-story-river-filter>is[blank]] %>
				<$set name="firstStoryTiddler" value={{{ [list<tv-story-list>nth[1]] }}}>
					<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<firstStoryTiddler>]"/>
				</$set>
			<% elseif [{$:/state/tiddlyflex/story-river/filter}match[yes]] %>
				<$let lastShownTiddler={{{ [subfilter<tdff.tiddlyflex-story-river-filter>] +[last[]] }}} insertBeforeTiddler={{{ [list<tv-story-list>after<lastShownTiddler>] }}}>
					<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<insertBeforeTiddler>]"/>
				</$let>
			<% else %>
				<$action-listops $tiddler=<<tv-story-list>> $subfilter="[<actionTiddler>]"/>
			<% endif %>
		</$set>
	<% else %>
		<%if [{$:/state/tiddlyflex/story-river/filter}match[yes]] +[subfilter<tdff.tiddlyflex-story-river-filter>is[blank]] %>
			<$set name="firstStoryTiddler" value={{{ [list<tv-story-list>nth[1]] }}}>
				<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<firstStoryTiddler>]"/>
			</$set>
		<% elseif [{$:/state/tiddlyflex/story-river/filter}match[yes]] %>
			<$let lastShownTiddler={{{ [subfilter<tdff.tiddlyflex-story-river-filter>] +[last[]] }}} insertBeforeTiddler={{{ [list<tv-story-list>after<lastShownTiddler>] }}}>
				<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<insertBeforeTiddler>]"/>
			</$let>
		<% else %>
			<$action-listops $tiddler=<<tv-story-list>> $subfilter="[<actionTiddler>]"/>
		<% endif %>
	<% endif %>
</$vars>
\end
\procedure tiddlyflex-story-droppable-dragenter-actions()
<%if [[$:/state/dragging]get[dragenter-count]] %>
	<$action-setfield $tiddler="$:/state/dragging" target="" starting-next-tiddler="" copying=""/>
<% else %>
	<$action-setfield $tiddler="$:/state/dragging" dragenter-count="1"/>
<% endif %>
\end